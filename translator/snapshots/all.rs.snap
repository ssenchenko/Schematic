// =======================================================
// This file is generated. Do not edit manually!
// =======================================================
use async_graphql::{Context, Enum, Error, Interface, OutputType, SimpleObject, Result, Object, ComplexObject, Union};
use serde::Serialize;

#[derive(SimpleObject, Serialize)]
#[graphql(name = "Aws_CloudWatch_Alarm", rename_fields = "PascalCase", complex)]
pub struct AwsCloudWatchAlarm {
    pub id: String,
    pub all_properties: String,
}

#[ComplexObject(rename_fields = "PascalCase")]
impl AwsCloudWatchAlarm {
    pub async fn type_name(&self) -> String {
        "AWS::CloudWatch::Alarm".to_string()
    }
}

#[derive(SimpleObject, Serialize)]
#[graphql(name = "Aws_Ec2_Instance", rename_fields = "PascalCase", complex)]
pub struct AwsEc2Instance {
    pub id: String,
    pub all_properties: String,
}

#[ComplexObject(rename_fields = "PascalCase")]
impl AwsEc2Instance {
    pub async fn type_name(&self) -> String {
        "AWS::EC2::Instance".to_string()
    }
}


#[derive(Interface, Serialize)]
#[graphql(
    name = "Resource",
    rename_fields = "PascalCase",
    field(name = "id", ty = "String"),
    field(name = "type_name", ty = "String"),
    field(name = "all_properties", ty = "String"),
)]
pub enum Resource {
    AwsCloudWatchAlarm(AwsCloudWatchAlarm),
    AwsEc2Instance(AwsEc2Instance),
    Node(Node),
}

#[derive(SimpleObject, Serialize, Clone)]
#[graphql(name = "Node", rename_fields = "PascalCase")]
pub struct Node {
    pub id: String,
    pub type_name: String,
    pub all_properties: String,
}

#[derive(SimpleObject, Serialize)]
#[graphql(name = "Edge", rename_fields = "PascalCase")]
pub struct Edge {
    source: String,
    target: String,
    relation: Relation,
}

#[derive(Enum, Copy, Clone, Eq, PartialEq, Serialize)]
pub enum Relation {
    IsRelatedTo,
}

#[derive(SimpleObject, Serialize)]
#[graphql(name = "Topology", rename_fields = "PascalCase")]
pub struct Topology {
    nodes: Vec<Node>,
    edges: Vec<Edge>,
}

// =========== Relationships ===========

#[derive(Serialize)]
pub struct AwsCloudWatchAlarmRelationships<'a> {
    id: &'a String,
    type_name: &'a String,
    properties: &'a String,
}

impl AwsCloudWatchAlarm {
    pub async fn relationships(&self) -> AwsCloudWatchAlarmRelationships {
        AwsCloudWatchAlarmRelationships {
            id: &self.id,
            type_name: &self.type_name,
            properties: &self.all_properties,
        }
    }
}

#[derive(Union, Serialize)]
pub enum AwsCloudWatchAlarmConnections_DimensionsValue {
    AwsEc2Instance(AwsEc2Instance),
    AwsS3Bucket(AwsS3Bucket),
}
#[derive(Union, Serialize)]
pub enum AwsCloudWatchAlarmConnections_MetricsMetricStatMetricDimensionsValue {
    AwsEc2Instance(AwsEc2Instance),
    AwsS3Bucket(AwsS3Bucket),
}

#[Object(rename_fields = "PascalCase")]
impl AwsCloudWatchAlarmRelationships<'_> {
    pub async fn dimensions_value(&self, ctx: &Context<'_>) -> Vec<AwsCloudWatchAlarmConnections_DimensionsValue> {
        let atx_context = ctx.data::<AtsContext>()?;
        get_related_resource::<Vec<AwsCloudWatchAlarmConnections_DimensionsValue>>(
            &atx_context,
            &self.id,
            &self.type_name,
            &self.properties,
        ).await?
    }
    pub async fn metrics_metric_stat_metric_dimensions_value(&self, ctx: &Context<'_>) -> Vec<AwsCloudWatchAlarmConnections_MetricsMetricStatMetricDimensionsValue> {
        let atx_context = ctx.data::<AtsContext>()?;
        get_related_resource::<Vec<AwsCloudWatchAlarmConnections_MetricsMetricStatMetricDimensionsValue>>(
            &atx_context,
            &self.id,
            &self.type_name,
            &self.properties,
        ).await?
    }
}
