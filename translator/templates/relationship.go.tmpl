{{ if .Relationships }}
#[derive(Serialize)]
pub struct {{ .RustResourceName }}Relationships<'a> {
    properties: &'a String,
}

impl {{ .RustResourceName }} {
    pub async fn relationships(&self) -> {{ .RustResourceName }}Relationships {
        {{ .RustResourceName }}Relationships {
            properties: &self.all_properties,
        }
    }
}

{{ range .Relationships }}
    {{- if not (eq .TargetUnion.RustUnionName "") }}
        {{- template "union_enum.go.tmpl" .TargetUnion }}
    {{- end -}}
{{ end }}

#[Object(
    name = "{{ .GraphQlResourceName }}_Relationships",
    rename_fields = "camelCase"
)]
impl {{ .RustResourceName }}Relationships<'_> {
    {{- range .Relationships }}
    pub async fn {{ .RustSourcePropertyName }}(&self, ctx: &Context<'_>) -> {{ .RustReturnType }} {
        let atx_context = ctx.data::<AtsContext>()?;
        get_related_resource::<{{ .RustGenericType }}>(
            &atx_context,
            &self.identifier,
            &self.resource_type,
            &self.properties,
        ).await?
    }
    {{- end }}
}
{{ end }}