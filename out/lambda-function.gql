type LambdaFunctionCode {
    ImageUri: String
    ZipFile: String
    S3ObjectVersion: String
    S3Key: String
    S3Bucket: String
}
input LambdaFunctionCodeFilter {
    ImageUri: String
    ZipFile: String
    S3ObjectVersion: String
    S3Key: String
    S3Bucket: String
}

type LambdaFunctionDeadLetterConfig {
    TargetArn: String
}
input LambdaFunctionDeadLetterConfigFilter {
    TargetArn: String
}

type LambdaFunctionEnvironment {
    Variables: String
}
input LambdaFunctionEnvironmentFilter {
    Variables: String
}

type LambdaFunctionEphemeralStorage {
    Size: Int
}
input LambdaFunctionEphemeralStorageFilter {
    Size: Int
}

type LambdaFunctionFileSystemConfig {
    LocalMountPath: String
    Arn: String
}
input LambdaFunctionFileSystemConfigFilter {
    LocalMountPath: String
    Arn: String
}

type LambdaFunctionTracingConfig {
    Mode: LambdaFunctionTracingConfigModeEnum
}
input LambdaFunctionTracingConfigFilter {
    Mode: LambdaFunctionTracingConfigModeEnum
}

enum LambdaFunctionTracingConfigModeEnum {
    Active
    PassThrough
}

type LambdaFunctionVpcConfig {
    Ipv6AllowedForDualStack: Boolean
    SubnetIds: [String]
    SecurityGroupIds: [String]
}
input LambdaFunctionVpcConfigFilter {
    Ipv6AllowedForDualStack: Boolean
    SubnetIds: [String]
    SecurityGroupIds: [String]
}

type LambdaFunctionTag {
    Value: String
    Key: String
}
input LambdaFunctionTagFilter {
    Value: String
    Key: String
}

type LambdaFunctionImageConfig {
    WorkingDirectory: String
    Command: [String]
    EntryPoint: [String]
}
input LambdaFunctionImageConfigFilter {
    WorkingDirectory: String
    Command: [String]
    EntryPoint: [String]
}

type LambdaFunctionSnapStart {
    ApplyOn: LambdaFunctionSnapStartApplyOnEnum
}
input LambdaFunctionSnapStartFilter {
    ApplyOn: LambdaFunctionSnapStartApplyOnEnum
}

enum LambdaFunctionSnapStartApplyOnEnum {
    PublishedVersions
    None
}

type LambdaFunctionSnapStartResponse {
    OptimizationStatus: LambdaFunctionSnapStartResponseOptimizationStatusEnum
    ApplyOn: LambdaFunctionSnapStartResponseApplyOnEnum
}
input LambdaFunctionSnapStartResponseFilter {
    OptimizationStatus: LambdaFunctionSnapStartResponseOptimizationStatusEnum
    ApplyOn: LambdaFunctionSnapStartResponseApplyOnEnum
}

enum LambdaFunctionSnapStartResponseOptimizationStatusEnum {
    On
    Off
}

enum LambdaFunctionSnapStartResponseApplyOnEnum {
    PublishedVersions
    None
}

type LambdaFunctionRuntimeManagementConfig {
    RuntimeVersionArn: String
    UpdateRuntimeOn: LambdaFunctionRuntimeManagementConfigUpdateRuntimeOnEnum
}
input LambdaFunctionRuntimeManagementConfigFilter {
    RuntimeVersionArn: String
    UpdateRuntimeOn: LambdaFunctionRuntimeManagementConfigUpdateRuntimeOnEnum
}

enum LambdaFunctionRuntimeManagementConfigUpdateRuntimeOnEnum {
    Auto
    FunctionUpdate
    Manual
}

type LambdaFunctionLoggingConfig {
    SystemLogLevel: LambdaFunctionLoggingConfigSystemLogLevelEnum
    ApplicationLogLevel: LambdaFunctionLoggingConfigApplicationLogLevelEnum
    LogFormat: LambdaFunctionLoggingConfigLogFormatEnum
    LogGroup: String
}
input LambdaFunctionLoggingConfigFilter {
    SystemLogLevel: LambdaFunctionLoggingConfigSystemLogLevelEnum
    ApplicationLogLevel: LambdaFunctionLoggingConfigApplicationLogLevelEnum
    LogFormat: LambdaFunctionLoggingConfigLogFormatEnum
    LogGroup: String
}

enum LambdaFunctionLoggingConfigSystemLogLevelEnum {
    DEBUG
    INFO
    WARN
}

enum LambdaFunctionLoggingConfigApplicationLogLevelEnum {
    TRACE
    DEBUG
    INFO
    WARN
    ERROR
    FATAL
}

enum LambdaFunctionLoggingConfigLogFormatEnum {
    Text
    JSON
}

type LambdaFunction {
    Arn: String
    Code: LambdaFunctionCode
    DeadLetterConfig: LambdaFunctionDeadLetterConfig
    Description: String
    Environment: LambdaFunctionEnvironment
    EphemeralStorage: LambdaFunctionEphemeralStorage
    FileSystemConfigs: [LambdaFunctionFileSystemConfig]
    FunctionName: String
    Handler: String
    Architectures: [LambdaFunctionArchitecturesEnum]
    KmsKeyArn: String
    Layers: [String]
    MemorySize: Int
    ReservedConcurrentExecutions: Int
    Role: String
    Runtime: String
    Tags: [LambdaFunctionTag]
    Timeout: Int
    TracingConfig: LambdaFunctionTracingConfig
    VpcConfig: LambdaFunctionVpcConfig
    CodeSigningConfigArn: String
    ImageConfig: LambdaFunctionImageConfig
    PackageType: LambdaFunctionPackageTypeEnum
    Policy: String
    SnapStart: LambdaFunctionSnapStart
    SnapStartResponse: LambdaFunctionSnapStartResponse
    RuntimeManagementConfig: LambdaFunctionRuntimeManagementConfig
    LoggingConfig: LambdaFunctionLoggingConfig
}
input LambdaFunctionFilter {
    Arn: String
    Code: LambdaFunctionCodeFilter
    DeadLetterConfig: LambdaFunctionDeadLetterConfigFilter
    Description: String
    Environment: LambdaFunctionEnvironmentFilter
    EphemeralStorage: LambdaFunctionEphemeralStorageFilter
    FileSystemConfigs: [LambdaFunctionFileSystemConfigFilter]
    FunctionName: String
    Handler: String
    Architectures: [LambdaFunctionArchitecturesEnum]
    KmsKeyArn: String
    Layers: [String]
    MemorySize: Int
    ReservedConcurrentExecutions: Int
    Role: String
    Runtime: String
    Tags: [LambdaFunctionTagFilter]
    Timeout: Int
    TracingConfig: LambdaFunctionTracingConfigFilter
    VpcConfig: LambdaFunctionVpcConfigFilter
    CodeSigningConfigArn: String
    ImageConfig: LambdaFunctionImageConfigFilter
    PackageType: LambdaFunctionPackageTypeEnum
    Policy: String
    SnapStart: LambdaFunctionSnapStartFilter
    SnapStartResponse: LambdaFunctionSnapStartResponseFilter
    RuntimeManagementConfig: LambdaFunctionRuntimeManagementConfigFilter
    LoggingConfig: LambdaFunctionLoggingConfigFilter
}

enum LambdaFunctionArchitecturesEnum {
    x86_64
    arm64
}

enum LambdaFunctionPackageTypeEnum {
    Image
    Zip
}

